#!/bin/sh -e


###############
## CONSTANTS ##
###############
CASTTY_BASEDIR=$(dirname "$0")
CASTTY_MK="$CASTTY_BASEDIR/castty.mk"
CASTTY_RECDIR="rec"
CASTTY_SRCDIR="src"
CASTTY_CLIPDIR="clip"
CASTTY_NJOBS="$((`nproc`))"
CASTTY_FIFO="$CASTTY_RECDIR/fifo"


###################
## CONFIGURATION ##
###################

if [ -f "$HOME/.config/casttyrc" ]; then
    . "$HOME/.config/casttyrc"
fi

if [ -z "$CASTTY_FILTER" ]; then
    # Assume we're doing compression and noise-gating in hardware, so just
    # do a simple filter and loudness normalization
    CASTTY_FILTER="highpass=f=80"
    CASTTY_FILTER="$CASTTY_FILTER,lowpass=f=12000"
    CASTTY_FILTER="$CASTTY_FILTER,loudnorm"
fi


## DEFAULTS ##

# AUDIO
: ${CASTTY_AUDIO_DEVICE:=pulse}
: ${CASTTY_AUDIO_INPUT:=default}

export CASTTY_AUDIO_INPUT
export CASTTY_AUDIO_DEVICE
export CASTTY_FILTER

# VIDEO
: ${CASTTY_VIDEO_FPS:=15}
: ${CASTTY_VIDEO_DEVICE:=x11grab}
: ${CASTTY_VIDEO_SIZE:=1920x1080}
: ${CASTTY_VIDEO_FPS:=15}
: ${CASTTY_VIDEO_INPUT:=:0.0}


export CASTTY_VIDEO_FPS
export CASTTY_VIDEO_DEVICE
export CASTTY_VIDEO_SIZE
export CASTTY_VIDEO_FPS
export CASTTY_VIDEO_INPUT




# Transcode source files
castty_ingest() {
    # for i in $CASTTY_RECDIR/slide-*.ogv; do
    #     CASTTY_FILES="$CASTTY_FILES $CASTTY_SRCDIR/$(basename -s .ogv $i).mkv"
    # done

    mkdir -p "$CASTTY_SRCDIR"

    ## VIDEO
    echo Ingesting video...

    # raw video
    for i in $CASTTY_RECDIR/*.nut.zst; do
        test -f "$i" \
            && zstd -T0 -qdc "$i"  \
                | \
                ffmpeg -i - \
                       -c:v libx264 -qp 0  \
                       "$CASTTY_SRCDIR/$(basename -s .nut.zst $i).mkv" \
            && rm -v "$i"
    done

    # screenshots
    for i in $CASTTY_RECDIR/*.png; do
        test -f "$i" \
            && mv "$i" "$CASTTY_SRCDIR"
    done


    ## AUDIO
    echo Ingesting audio...
    for i in $CASTTY_RECDIR/*.wav; do
        test -f "$i" \
            && ffmpeg -i "$i" \
                      -c:a flac \
                      "$CASTTY_SRCDIR/$(basename -s .wav $i).flac" \
            && rm -v "$i"
    done


    ## CLIPS
    mkdir -p "$CASTTY_CLIPDIR"
    echo Combining clips....
    for v in $CASTTY_SRCDIR/video-*.mkv  $CASTTY_SRCDIR/video-*.png; do
        if [ -f "$v" ]; then
            b=$(basename "$v")
            bb=$(echo "$b" | cut -d '.' -f 1)
            s=$(echo "$b" | cut -d '.' -f 2)
            num=$(echo "$bb" | sed  -e 's!video-\([^/]*\)$!\1!')
            a="$CASTTY_SRCDIR/audio-$num.flac"
            o="$CASTTY_CLIPDIR/clip-$num.mkv"

           if [ -f "$v" -a ! -f "$o" ] ; then
               case "$s" in
                   mkv)
                       ffmpeg -i "$v" -i "$a" \
                              -map 0:v:0 -map 1:a:0 \
                              -c:v copy  -c:a copy \
                              "$o"
                       ;;
                   png)
                       ffmpeg -i "$v" -i "$a" \
                              -map 0:v:0 -map 1:a:0 \
                              -c:v libx264 -qp 0    \
                              -c:a copy \
                              "$o"
                       ;;
               esac
           fi
        fi
    done
}

# Postprocess
castty_post() {
    # All source files
    for i in "$CASTTY_SRCDIR"/slide-*.mkv; do echo "file '$i'"; done  > inputs.txt

    mkdir -p out

    # Concatenate files and filter audio
    ffmpeg -f concat -i inputs.txt \
           -codec:v copy \
           -codec:a flac \
           -filter:a "$CASTTY_FILTER" \
           -ac 1 \
           out/hi-quality.mkv

    # Encode audio
    ffmpeg -i out/hi-quality.mkv  -vn \
           -filter:a aresample=48000 \
           -codec:a pcm_s16le \
           -f wav - \
        | \
        fdkaac --profile 2 --bitrate-mode 4  - -o out/compressed.m4a

    # Transcode video and merge audio
    ffmpeg -i out/hi-quality.mkv \
           -i out/compressed.m4a \
           -map 0:v:0 -map 1:a:0 \
           -codec:v libx264 -crf 23 \
           -codec:a copy \
           -max_muxing_queue_size 4096 \
           out/compressed.mp4
}

castty_clean() {
    rm -rf out clip
}

# Record
castty_record() {

    ## ARGUMENT VARIABLES
    RECORD_AUDIO=yes
    RECORD_VIDEO=yes
    RECORD_SCREENSHOT=no

    # Get Command Line Arguments
    while [ "$1" != "" ]; do
        case "$1" in
            -o) # Output file
                # OUTPUT_BASE=`echo "$2" | sed -e 's/\\.[^\\.]*$//'`
                # OUTPUT="$CASTTY_RECDIR/$OUTPUT_BASE.ogv"
                # OUTPUT_AUDIO="$CASTTY_RECDIR/$OUTPUT_BASE.flac"
                OUTPUT_BASE_VIDEO="$CASTTY_RECDIR/video-$2"
                OUTPUT_BASE_AUDIO="$CASTTY_RECDIR/audio-$2"
                shift
                shift
                ;;
            -s)
                RECORD_SCREENSHOT=yes
                RECORD_VIDEO=no
                shift
                ;;
            -na) # no audio
                RECORD_AUDIO=no
                shift
                ;;
            -nv) # no video
                RECORD_VIDEO=no
                shift
                ;;
            # -nc) # TODO
            #     RECORDMYDESKTOP_ARGS="$RECORDMYDESKTOP_ARGS --no-cursor"
            #     shift
            #     ;;
            *)
                echo " ERROR: invalid argument \`$1'"
                exit 1
                ;;
        esac
    done


    ## SETUP ##
    mkdir -p "$CASTTY_RECDIR"
    PID_WAIT=""

    # Video setup
    if [ "$RECORD_VIDEO" = yes ] ; then
        # Create FIFO
        if [ -e "$CASTTY_FIFO" ]; then
            >&2 echo "ERROR: '$CASTTY_FIFO' already exists"
            exit 1
        fi
        mkfifo "$CASTTY_FIFO"

        zstd --fast - \
             < "$CASTTY_FIFO" \
             > "$OUTPUT_BASE_VIDEO".nut.zst  &
        PID_WAIT="$!"
    fi

    if [ "$RECORD_SCREENSHOT" = yes ] ; then
        ffmpeg -hide_banner \
               -f "$CASTTY_VIDEO_DEVICE" \
               -video_size "$CASTTY_VIDEO_SIZE" \
               -framerate 30 \
               -i "$CASTTY_VIDEO_INPUT" \
               -vframes 1 \
               "$OUTPUT_BASE_VIDEO".png
    fi


    ## CAPTURE ##
    TIME_START=$(date '+%s.%3N')

    # quirk: ffmpeg will return 255 when killed, so || with true

    # Capture video
    if [ "$RECORD_VIDEO" = yes ] ; then
        ffmpeg -hide_banner \
               -f "$CASTTY_VIDEO_DEVICE" \
               -video_size "$CASTTY_VIDEO_SIZE" \
               -framerate "$CASTTY_VIDEO_FPS" \
               -i "$CASTTY_VIDEO_INPUT" \
               -codec:v rawvideo \
               -f nut - \
               > "$CASTTY_FIFO" || true &
    fi

    # Capture audio
    if [ "$RECORD_AUDIO" = yes ] ; then
        ffmpeg -hide_banner \
               -f "$CASTTY_AUDIO_DEVICE" \
               -i "$CASTTY_AUDIO_INPUT" \
               -codec:a pcm_s16le  \
               "$OUTPUT_BASE_AUDIO".wav \
            || true
    fi

    TIME_END=$(date '+%s.%3N')

    ## CLEANUP ##

    # Wait for video to finish
    if [ -n "$PID_WAIT" ] ; then
        wait "$PID_WAIT"
    fi

    # Delete compression fifo
    if [ -e "$CASTTY_FIFO" ]; then
        rm "$CASTTY_FIFO"
    fi

    printf "WALL TIME: %0.3f sec\n" $(echo "$TIME_END" - "$TIME_START" | bc)

    true



    # if [ "$AUDIO" = yes ]; then
    #     echo Recording audio...

    #     exec ffmpeg \
    #          -f pulse -i "default" \
    #          -ac 1 \
    #          -acodec flac \
    #          "$OUTPUT_AUDIO"
    #     exit 1
    # fi


    # if [ "$COMBINE" = yes ]; then
    #     vlc -I  dummy --no-loop --play-and-exit "$OUTPUT_AUDIO" &
    #     OUTPUT_VIDEO="$OUTPUT_BASE-tmp.ogv"
    #     recordmydesktop $RECORDMYDESKTOP_ARGS \
    #         --no-sound \
    #         --fps "$FPS" \
    #         --v_quality 63 \
    #         --workdir /tmp \
    #         --stop-shortcut "Mod1+s" \
    #         --windowid "$WINDOW" -o "$OUTPUT_VIDEO"

    #     ffmpeg -i "$OUTPUT_VIDEO" -i "$OUTPUT_AUDIO" \
    #            -vcodec copy \
    #            -acodec libvorbis -q:a 10  \
    #            "$OUTPUT" \
    #         && rm "$OUTPUT_VIDEO" \
    #         && exit 0
    # fi


    # # Audio and Video
    # exec recordmydesktop $RECORDMYDESKTOP_ARGS \
    #      --channels 1 \
    #      --device "$DEVICE" \
    #      --freq "$FREQ" \
    #      --s_quality 10 \
    #      --fps "$FPS" \
    #      --v_quality 63 \
    #      --workdir /tmp \
    #      --stop-shortcut "Mod1+s" \
    #      --windowid "$WINDOW" -o "$OUTPUT"



    # ffmpeg \
        #     -f pulse -i "default" \
        #     -acodec flac \
        #     -f x11grab -video_size 1920x1080 -framerate 15  -i :0.0+3840,0 \
        #     -vcodec libx264 -qp 0 -preset ultrafast \
        #     test.mp4

}

castty_env () {
    env | grep CASTTY
}



case "$1" in
    ingest)
        castty_ingest
    ;;
    post)
        castty_post
    ;;
    rec|record)
        shift
        castty_record "$@"
    ;;
    clean)
        castty_clean
    ;;
    env)
        castty_env
    ;;
    *)
        echo "ERROR: invalid command \`$1'"
        exit 1
        ;;
esac
